#!/usr/bin/env python
"""
WordAPI.py
Copyright 2012 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

from models import *


class ProjectApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    
    def get_all_projects(self, **kwargs):
        """Get all the project this user has access to

        Args:
            limit, str:  (optional)
            from, str:  (optional)
            until, str:  (optional)
            filter, str:  (optional)
            sort, str:  (optional)
            field, str:  (optional)
            
        Returns: EntityListReturn
        """

        allParams = ['limit', 'from', 'until', 'filter', 'sort', 'field']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method get_all_projects" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/project/'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('limit' in params):
            queryParams['limit'] = self.apiClient.toStringValue(params['limit'])
        if ('from' in params):
            queryParams['from'] = self.apiClient.toStringValue(params['from'])
        if ('until' in params):
            queryParams['until'] = self.apiClient.toStringValue(params['until'])
        if ('filter' in params):
            queryParams['filter'] = self.apiClient.toStringValue(params['filter'])
        if ('sort' in params):
            queryParams['sort'] = self.apiClient.toStringValue(params['sort'])
        if ('field' in params):
            queryParams['field'] = self.apiClient.toStringValue(params['field'])
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EntityListReturn')
        return responseObject
        
        
    def create_project(self, body, **kwargs):
        """Creates a project with the attributes provided in the request body

        Args:
            body, ProjectPostJson:  (required)
            
        Returns: EntityReturn
        """

        allParams = ['body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method create_project" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/project/'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EntityReturn')
        return responseObject
        
        
    def delete_project(self, uuid, **kwargs):
        """Delete a project

        Args:
            uuid, str:  (required)
            
        Returns: StatusReturn
        """

        allParams = ['uuid']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method delete_project" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/project/{uuid}/'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'StatusReturn')
        return responseObject
        
        
    def get_project(self, uuid, **kwargs):
        """Get details of a specific project

        Args:
            uuid, str:  (required)
            
        Returns: EntityReturn
        """

        allParams = ['uuid']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method get_project" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/project/{uuid}/'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EntityReturn')
        return responseObject
        
        
    def update_project(self, uuid, body, **kwargs):
        """Updates project with attributes provided in request body

        Args:
            uuid, str:  (required)
            body, ProjectPutJson:  (required)
            
        Returns: EntityReturn
        """

        allParams = ['uuid', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method update_project" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/project/{uuid}/'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EntityReturn')
        return responseObject
        
        
    def remove_acl(self, uuid, body, **kwargs):
        """Remove an entity acl

        Args:
            uuid, str:  (required)
            body, ACLDeleteJson:  (required)
            
        Returns: dict
        """

        allParams = ['uuid', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method remove_acl" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/project/{uuid}/acl'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'dict')
        return responseObject
        
        
    def get_acl(self, uuid, **kwargs):
        """Get all acl of an entity

        Args:
            uuid, str:  (required)
            
        Returns: dict
        """

        allParams = ['uuid']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method get_acl" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/project/{uuid}/acl'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'dict')
        return responseObject
        
        
    def add_acl(self, uuid, body, **kwargs):
        """Add acl to an entity

        Args:
            uuid, str:  (required)
            body, ACLJson:  (required)
            
        Returns: dict
        """

        allParams = ['uuid', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method add_acl" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/project/{uuid}/acl'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'dict')
        return responseObject
        
        
    def update_acl(self, uuid, body, **kwargs):
        """Update an entity acl

        Args:
            uuid, str:  (required)
            body, ACLJson:  (required)
            
        Returns: dict
        """

        allParams = ['uuid', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method update_acl" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/project/{uuid}/acl'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'dict')
        return responseObject
        
        
    def get_entity_children(self, uuid, **kwargs):
        """Get all direct children of a project/folder

        Args:
            uuid, str:  (required)
            limit, str:  (optional)
            until, str:  (optional)
            from, str:  (optional)
            filter, str:  (optional)
            sort, str:  (optional)
            field, str:  (optional)
            
        Returns: EntityListReturn
        """

        allParams = ['uuid', 'limit', 'until', 'from', 'filter', 'sort', 'field']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method get_entity_children" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/project/{uuid}/children'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('limit' in params):
            queryParams['limit'] = self.apiClient.toStringValue(params['limit'])
        if ('until' in params):
            queryParams['until'] = self.apiClient.toStringValue(params['until'])
        if ('from' in params):
            queryParams['from'] = self.apiClient.toStringValue(params['from'])
        if ('filter' in params):
            queryParams['filter'] = self.apiClient.toStringValue(params['filter'])
        if ('sort' in params):
            queryParams['sort'] = self.apiClient.toStringValue(params['sort'])
        if ('field' in params):
            queryParams['field'] = self.apiClient.toStringValue(params['field'])
        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EntityListReturn')
        return responseObject
        
        
    def remove_metadata(self, uuid, body, **kwargs):
        """Remove an entity metadata

        Args:
            uuid, str:  (required)
            body, MetadataDeleteJson:  (required)
            
        Returns: dict
        """

        allParams = ['uuid', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method remove_metadata" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/project/{uuid}/metadata'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'dict')
        return responseObject
        
        
    def get_metadata(self, uuid, **kwargs):
        """Get all metadata of an entity

        Args:
            uuid, str:  (required)
            
        Returns: dict
        """

        allParams = ['uuid']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method get_metadata" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/project/{uuid}/metadata'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'dict')
        return responseObject
        
        
    def add_metadata(self, uuid, body, **kwargs):
        """Add metadata to an entity

        Args:
            uuid, str:  (required)
            body, MetadataJson:  (required)
            
        Returns: dict
        """

        allParams = ['uuid', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method add_metadata" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/project/{uuid}/metadata'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'dict')
        return responseObject
        
        
    def update_metadata(self, uuid, body, **kwargs):
        """Update an entity metadata

        Args:
            uuid, str:  (required)
            body, MetadataJson:  (required)
            
        Returns: dict
        """

        allParams = ['uuid', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method update_metadata" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/project/{uuid}/metadata'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'dict')
        return responseObject
        
        
    


